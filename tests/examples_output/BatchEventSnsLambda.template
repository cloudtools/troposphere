{
 "AWSTemplateFormatVersion": "2010-09-09",
 "Description": "Setup cron jobs with a job queue and send message through sns when a job fails.",
 "Outputs": {
  "BatchComputeEnvironment": {
   "Value": {
    "Ref": "ComputeEnvironment"
   }
  },
  "EventRuleCronFailJob": {
   "Value": {
    "Ref": "EventRuleCronFailJob"
   }
  },
  "EventRuleCronSuccessJob": {
   "Value": {
    "Ref": "EventRuleCronSuccessJob"
   }
  },
  "JobQueueCron": {
   "Value": {
    "Ref": "JobQueueCron"
   }
  },
  "LambdaCronFailNotify": {
   "Value": {
    "Ref": "LambdaCronFailNotify"
   }
  },
  "SnsTopicCronFailed": {
   "Value": {
    "Ref": "SnsTopicCronFailed"
   }
  }
 },
 "Parameters": {
  "BatchSG": {
   "Type": "String"
  },
  "Subnet1": {
   "Type": "String"
  },
  "Subnet2": {
   "Type": "String"
  },
  "Subnet3": {
   "Type": "String"
  }
 },
 "Resources": {
  "BatchTaskFargateRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "ecs-tasks.amazonaws.com"
        ]
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "ComputeEnvironment": {
   "Properties": {
    "ComputeEnvironmentName": "cron-compute",
    "ComputeResources": {
     "MaxvCpus": 16,
     "SecurityGroupIds": [
      {
       "Ref": "BatchSG"
      }
     ],
     "Subnets": [
      {
       "Ref": "Subnet1"
      },
      {
       "Ref": "Subnet2"
      },
      {
       "Ref": "Subnet3"
      }
     ],
     "Type": "FARGATE"
    },
    "ServiceRole": {
     "Fn::Join": [
      ":",
      [
       "arn:aws:iam:",
       {
        "Ref": "AWS::AccountId"
       },
       "role/aws-service-role/batch.amazonaws.com/AWSServiceRoleForBatch"
      ]
     ]
    },
    "State": "ENABLED",
    "Type": "MANAGED"
   },
   "Type": "AWS::Batch::ComputeEnvironment"
  },
  "CronFailedTopicPolicy": {
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sns:Publish"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "events.amazonaws.com"
        ]
       },
       "Resource": [
        {
         "Ref": "SnsTopicCronFailed"
        }
       ]
      }
     ]
    },
    "Topics": [
     {
      "Ref": "SnsTopicCronFailed"
     }
    ]
   },
   "Type": "AWS::SNS::TopicPolicy"
  },
  "EventBridgeInvokeBatchJobQueueRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "events.amazonaws.com"
        ]
       }
      }
     ]
    },
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "batch:SubmitJob"
         ],
         "Effect": "Allow",
         "Resource": [
          "*"
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "EventBridgeInvokeBatchJobQueuePolicy"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "EventRuleCronFailJob": {
   "Properties": {
    "Name": "cron-fail",
    "ScheduleExpression": "cron(*/3 * ? * * *)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Ref": "JobQueueCron"
      },
      "BatchParameters": {
       "JobDefinition": {
        "Fn::Join": [
         ":",
         [
          "arn:aws:batch",
          {
           "Ref": "AWS::Region"
          },
          {
           "Ref": "AWS::AccountId"
          },
          "job-definition/cron-fail",
          1
         ]
        ]
       },
       "JobName": "cron-fail-eventbridge"
      },
      "Id": "cron-fail",
      "RoleArn": {
       "Fn::GetAtt": [
        "EventBridgeInvokeBatchJobQueueRole",
        "Arn"
       ]
      }
     }
    ]
   },
   "Type": "AWS::Events::Rule"
  },
  "EventRuleCronFailed": {
   "Properties": {
    "Description": "Send SNS for cron jobs of cron-queue for which status are FAILED",
    "EventPattern": {
     "detail": {
      "jobQueue": [
       {
        "Ref": "JobQueueCron"
       }
      ],
      "status": [
       "FAILED"
      ]
     },
     "detail-type": [
      "Batch Job State Change"
     ],
     "source": [
      "aws.batch"
     ]
    },
    "Name": "cron-failed",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Ref": "SnsTopicCronFailed"
      },
      "Id": "cron-failed"
     }
    ]
   },
   "Type": "AWS::Events::Rule"
  },
  "EventRuleCronSuccessJob": {
   "Properties": {
    "Name": "cron-success",
    "ScheduleExpression": "cron(*/1 * ? * * *)",
    "State": "ENABLED",
    "Targets": [
     {
      "Arn": {
       "Ref": "JobQueueCron"
      },
      "BatchParameters": {
       "JobDefinition": {
        "Fn::Join": [
         ":",
         [
          "arn:aws:batch",
          {
           "Ref": "AWS::Region"
          },
          {
           "Ref": "AWS::AccountId"
          },
          "job-definition/cron-success",
          1
         ]
        ]
       },
       "JobName": "cron-success-eventbridge"
      },
      "Id": "cron-success",
      "RoleArn": {
       "Fn::GetAtt": [
        "EventBridgeInvokeBatchJobQueueRole",
        "Arn"
       ]
      }
     }
    ]
   },
   "Type": "AWS::Events::Rule"
  },
  "JobDefinitionFailCron": {
   "Properties": {
    "ContainerProperties": {
     "Command": [
      "/bin/sh",
      "-c",
      "exit 1"
     ],
     "ExecutionRoleArn": {
      "Fn::GetAtt": [
       "BatchTaskFargateRole",
       "Arn"
      ]
     },
     "FargatePlatformConfiguration": {
      "PlatformVersion": "1.4.0"
     },
     "Image": "public.ecr.aws/amazonlinux/amazonlinux:latest",
     "JobRoleArn": {
      "Fn::GetAtt": [
       "BatchTaskFargateRole",
       "Arn"
      ]
     },
     "LogConfiguration": {
      "LogDriver": "awslogs"
     },
     "NetworkConfiguration": {
      "AssignPublicIp": "ENABLED"
     },
     "ResourceRequirements": [
      {
       "Type": "MEMORY",
       "Value": "8192"
      },
      {
       "Type": "VCPU",
       "Value": "1"
      }
     ]
    },
    "JobDefinitionName": "cron-fail",
    "PlatformCapabilities": [
     "FARGATE"
    ],
    "RetryStrategy": {
     "Attempts": 3
    },
    "Timeout": {
     "AttemptDurationSeconds": 3600
    },
    "Type": "container"
   },
   "Type": "AWS::Batch::JobDefinition"
  },
  "JobDefinitionSuccessCron": {
   "Properties": {
    "ContainerProperties": {
     "Command": [
      "echo",
      "'Success'"
     ],
     "ExecutionRoleArn": {
      "Fn::GetAtt": [
       "BatchTaskFargateRole",
       "Arn"
      ]
     },
     "FargatePlatformConfiguration": {
      "PlatformVersion": "1.4.0"
     },
     "Image": "public.ecr.aws/amazonlinux/amazonlinux:latest",
     "JobRoleArn": {
      "Fn::GetAtt": [
       "BatchTaskFargateRole",
       "Arn"
      ]
     },
     "LogConfiguration": {
      "LogDriver": "awslogs"
     },
     "NetworkConfiguration": {
      "AssignPublicIp": "ENABLED"
     },
     "ResourceRequirements": [
      {
       "Type": "MEMORY",
       "Value": "8192"
      },
      {
       "Type": "VCPU",
       "Value": "1"
      }
     ]
    },
    "JobDefinitionName": "cron-success",
    "PlatformCapabilities": [
     "FARGATE"
    ],
    "RetryStrategy": {
     "Attempts": 3
    },
    "Timeout": {
     "AttemptDurationSeconds": 3600
    },
    "Type": "container"
   },
   "Type": "AWS::Batch::JobDefinition"
  },
  "JobQueueCron": {
   "Properties": {
    "ComputeEnvironmentOrder": [
     {
      "ComputeEnvironment": {
       "Ref": "ComputeEnvironment"
      },
      "Order": 1
     }
    ],
    "JobQueueName": "cron-queue",
    "Priority": 60,
    "State": "ENABLED"
   },
   "Type": "AWS::Batch::JobQueue"
  },
  "LambdaCronFailNotify": {
   "Properties": {
    "Code": {
     "ZipFile": "\nimport boto3\nimport json\n\n\ndef lambda_handler(event, context):\n    print(event)  # implement notification code here, ex; to slack, telegram, etc.\n    return {\n        \"statusCode\": 200,\n        \"body\": json.dumps({\n            \"message\": \"ok\",\n        })\n    }\n"
    },
    "FunctionName": "lambda_cron_fail_notify",
    "Handler": "index.lambda_handler",
    "MemorySize": 128,
    "Role": {
     "Fn::GetAtt": [
      "LambdaExecutionRole",
      "Arn"
     ]
    },
    "Runtime": "python3.9",
    "Timeout": 900
   },
   "Type": "AWS::Lambda::Function"
  },
  "LambdaExecutionRole": {
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sts:AssumeRole"
       ],
       "Effect": "Allow",
       "Principal": {
        "Service": [
         "lambda.amazonaws.com"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Path": "/",
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "logs:*"
         ],
         "Effect": "Allow",
         "Resource": "arn:aws:logs:*:*:*"
        },
        {
         "Action": [
          "lambda:*"
         ],
         "Effect": "Allow",
         "Resource": "*"
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "root"
     }
    ]
   },
   "Type": "AWS::IAM::Role"
  },
  "LambdaInvokePermissionCronFailed": {
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Ref": "LambdaCronFailNotify"
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "SnsTopicCronFailed"
    }
   },
   "Type": "AWS::Lambda::Permission"
  },
  "SnsTopicCronFailed": {
   "Properties": {
    "DisplayName": "SnsTopicCronFailed",
    "Subscription": [
     {
      "Endpoint": {
       "Fn::GetAtt": [
        "LambdaCronFailNotify",
        "Arn"
       ]
      },
      "Protocol": "lambda"
     }
    ],
    "TopicName": "SnsTopicCronFailed"
   },
   "Type": "AWS::SNS::Topic"
  }
 },
 "Transform": "AWS::Serverless-2016-10-31"
}
