# Copyright (c) 2012-2019, Mark Peek <mark@peek.org>
# All rights reserved.
#
# See LICENSE file for full license.
#
# *** Do not modify - this file is autogenerated ***
# Resource specification version: 2.20.0

from . import AWSObject
from . import AWSProperty
from .validators import boolean
from .validators import integer
from .batch_validators import LaunchTemplateSpecificationMixin
from .batch_validators import validate_environment_state
from .batch_validators import validate_queue_state


class LaunchTemplateSpecification(
        LaunchTemplateSpecificationMixin, AWSProperty):
    props = {
        'LaunchTemplateId': (basestring, False),
        'LaunchTemplateName': (basestring, False),
        'Version': (basestring, False),
    }


class ComputeResources(AWSProperty):
    props = {
        'BidPercentage': (integer, False),
        'DesiredvCpus': (integer, False),
        'Ec2KeyPair': (basestring, False),
        'ImageId': (basestring, False),
        'InstanceRole': (basestring, True),
        'InstanceTypes': ([basestring], True),
        'LaunchTemplate': (LaunchTemplateSpecification, False),
        'MaxvCpus': (integer, True),
        'MinvCpus': (integer, True),
        'PlacementGroup': (basestring, False),
        'SecurityGroupIds': ([basestring], True),
        'SpotIamFleetRole': (basestring, False),
        'Subnets': ([basestring], True),
        'Tags': (dict, False),
        'Type': (basestring, True),
    }


class ComputeEnvironment(AWSObject):
    resource_type = "AWS::Batch::ComputeEnvironment"

    props = {
        'ComputeEnvironmentName': (basestring, False),
        'ComputeResources': (ComputeResources, False),
        'ServiceRole': (basestring, True),
        'State': (validate_environment_state, False),
        'Type': (basestring, True),
    }


class Environment(AWSProperty):
    props = {
        'Name': (basestring, False),
        'Value': (basestring, False),
    }


class MountPoints(AWSProperty):
    props = {
        'ContainerPath': (basestring, False),
        'ReadOnly': (boolean, False),
        'SourceVolume': (basestring, False),
    }


class Ulimit(AWSProperty):
    props = {
        'HardLimit': (integer, True),
        'Name': (basestring, True),
        'SoftLimit': (integer, True),
    }


class VolumesHost(AWSProperty):
    props = {
        'SourcePath': (basestring, False),
    }


class Volumes(AWSProperty):
    props = {
        'Host': (VolumesHost, False),
        'Name': (basestring, False),
    }


class ContainerProperties(AWSProperty):
    props = {
        'Command': ([basestring], False),
        'Environment': ([Environment], False),
        'Image': (basestring, True),
        'InstanceType': (basestring, False),
        'JobRoleArn': (basestring, False),
        'Memory': (integer, True),
        'MountPoints': ([MountPoints], False),
        'Privileged': (boolean, False),
        'ReadonlyRootFilesystem': (boolean, False),
        'Ulimits': ([Ulimit], False),
        'User': (basestring, False),
        'Vcpus': (integer, True),
        'Volumes': ([Volumes], False),
    }


class NodeRangeProperty(AWSProperty):
    props = {
        'Container': (ContainerProperties, False),
        'TargetNodes': (basestring, True),
    }


class NodeProperties(AWSProperty):
    props = {
        'MainNode': (integer, True),
        'NodeRangeProperties': ([NodeRangeProperty], True),
        'NumNodes': (integer, True),
    }


class RetryStrategy(AWSProperty):
    props = {
        'Attempts': (integer, False),
    }


class Timeout(AWSProperty):
    props = {
        'AttemptDurationSeconds': (integer, False),
    }


class JobDefinition(AWSObject):
    resource_type = "AWS::Batch::JobDefinition"

    props = {
        'ContainerProperties': (ContainerProperties, False),
        'JobDefinitionName': (basestring, False),
        'NodeProperties': (NodeProperties, False),
        'Parameters': (dict, False),
        'RetryStrategy': (RetryStrategy, False),
        'Timeout': (Timeout, False),
        'Type': (basestring, True),
    }


class ComputeEnvironmentOrder(AWSProperty):
    props = {
        'ComputeEnvironment': (basestring, True),
        'Order': (integer, True),
    }


class JobQueue(AWSObject):
    resource_type = "AWS::Batch::JobQueue"

    props = {
        'ComputeEnvironmentOrder': ([ComputeEnvironmentOrder], True),
        'JobQueueName': (basestring, False),
        'Priority': (integer, True),
        'State': (validate_queue_state, False),
    }
