# Copyright (c) 2012-2019, Mark Peek <mark@peek.org>
# All rights reserved.
#
# See LICENSE file for full license.
#
# *** Do not modify - this file is autogenerated ***
# Resource specification version: 8.1.0


from . import AWSObject
from . import AWSProperty
from .validators import integer


class Archive(AWSObject):
    resource_type = "AWS::Events::Archive"

    props = {
        'ArchiveName': (basestring, False),
        'Description': (basestring, False),
        'EventPattern': (dict, False),
        'RetentionDays': (integer, False),
        'SourceArn': (basestring, True),
    }


class EventBus(AWSObject):
    resource_type = "AWS::Events::EventBus"

    props = {
        'EventSourceName': (basestring, False),
        'Name': (basestring, True),
    }


class Condition(AWSProperty):
    props = {
        'Key': (basestring, False),
        'Type': (basestring, False),
        'Value': (basestring, False),
    }


class EventBusPolicy(AWSObject):
    resource_type = "AWS::Events::EventBusPolicy"

    props = {
        'Action': (basestring, True),
        'Condition': (Condition, False),
        'EventBusName': (basestring, False),
        'Principal': (basestring, True),
        'Statement': (dict, False),
        'StatementId': (basestring, True),
    }


class BatchArrayProperties(AWSProperty):
    props = {
        'Size': (integer, False),
    }


class BatchRetryStrategy(AWSProperty):
    props = {
        'Attempts': (integer, False),
    }


class BatchParameters(AWSProperty):
    props = {
        'ArrayProperties': (BatchArrayProperties, False),
        'JobDefinition': (basestring, True),
        'JobName': (basestring, True),
        'RetryStrategy': (BatchRetryStrategy, False),
    }


class DeadLetterConfig(AWSProperty):
    props = {
        'Arn': (basestring, False),
    }


class AwsVpcConfiguration(AWSProperty):
    props = {
        'AssignPublicIp': (basestring, False),
        'SecurityGroups': ([basestring], False),
        'Subnets': ([basestring], True),
    }


class NetworkConfiguration(AWSProperty):
    props = {
        'AwsVpcConfiguration': (AwsVpcConfiguration, False),
    }


class EcsParameters(AWSProperty):
    props = {
        'Group': (basestring, False),
        'LaunchType': (basestring, False),
        'NetworkConfiguration': (NetworkConfiguration, False),
        'PlatformVersion': (basestring, False),
        'TaskCount': (integer, False),
        'TaskDefinitionArn': (basestring, True),
    }


class HttpParameters(AWSProperty):
    props = {
        'HeaderParameters': (dict, False),
        'PathParameterValues': ([basestring], False),
        'QueryStringParameters': (dict, False),
    }


class InputTransformer(AWSProperty):
    props = {
        'InputPathsMap': (dict, False),
        'InputTemplate': (basestring, True),
    }


class KinesisParameters(AWSProperty):
    props = {
        'PartitionKeyPath': (basestring, True),
    }


class RetryPolicy(AWSProperty):
    props = {
        'MaximumEventAgeInSeconds': (integer, False),
        'MaximumRetryAttempts': (integer, False),
    }


class RunCommandTarget(AWSProperty):
    props = {
        'Key': (basestring, True),
        'Values': ([basestring], True),
    }


class RunCommandParameters(AWSProperty):
    props = {
        'RunCommandTargets': ([RunCommandTarget], True),
    }


class SqsParameters(AWSProperty):
    props = {
        'MessageGroupId': (basestring, True),
    }


class Target(AWSProperty):
    props = {
        'Arn': (basestring, True),
        'BatchParameters': (BatchParameters, False),
        'DeadLetterConfig': (DeadLetterConfig, False),
        'EcsParameters': (EcsParameters, False),
        'HttpParameters': (HttpParameters, False),
        'Id': (basestring, True),
        'Input': (basestring, False),
        'InputPath': (basestring, False),
        'InputTransformer': (InputTransformer, False),
        'KinesisParameters': (KinesisParameters, False),
        'RetryPolicy': (RetryPolicy, False),
        'RoleArn': (basestring, False),
        'RunCommandParameters': (RunCommandParameters, False),
        'SqsParameters': (SqsParameters, False),
    }


class Rule(AWSObject):
    resource_type = "AWS::Events::Rule"

    props = {
        'Description': (basestring, False),
        'EventBusName': (basestring, False),
        'EventPattern': (dict, False),
        'Name': (basestring, False),
        'RoleArn': (basestring, False),
        'ScheduleExpression': (basestring, False),
        'State': (basestring, False),
        'Targets': ([Target], False),
    }
